{"version":3,"sources":["AllocateRooms.js","AllocatedRooms.js","AddPersonModal.js","AddRoomModal.js","CheckAllocateModal.js","EditPersonModal.js","SetupPage.js","App.js","reportWebVitals.js","index.js"],"names":["AllocateRooms","choices","checkTaken","val","taken","room","checkSorted","person","length","name","resetConflict","rooms","holder","conflict","isConflict","i","other","push","rand","Math","floor","random","AllocatedRooms","props","Container","Row","className","Table","striped","bordered","hover","allocations","map","onClick","reallocateRooms","setState","AddPersonModal","useState","setName","setRooms","forceUpdate","setValue","value","useForceUpdate","close","setShow","onSubmit","addPerson","allowDrop","e","preventDefault","drag","document","getElementById","target","id","getAttribute","dataTransfer","setData","drop","getData","oldRank","newRank","oldRanks","newRanks","moveRank","parseInt","useEffect","roomsCopy","show","Modal","onHide","Header","closeButton","Body","Form","Label","Control","type","onChange","onKeyDown","keyCode","index","draggable","onDrop","onDragOver","onDragStart","Footer","Button","variant","disabled","AddRoomModal","roomName","setRoomName","addRoom","require","CheckAllocteModal","checkText","allocateRooms","EditPersonModal","startName","setStartName","updatePerson","SetUpPage","people","setPeople","showAddRoom","setShowAddRoom","showAddPeople","setShowAddPeople","showEditPerson","setShowEditPerson","personToEdit","setPersonToEdit","roomsToEdit","setRoomsToEdit","checkAllocate","setCheckAllocate","setCheckText","onEditPerson","rankings","split","newRooms","oldName","newName","newPeople","Col","alert","toString","App","state","setChoices","setAllocations","onAllocateRooms","result","displayPage","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ec5ed364.chunk.js","sourcesContent":["function AllocateRooms(choices) {\n\n    function checkTaken(val) {\n        for (let room of taken) {\n            if (val === room.room){\n                return true\n            }\n        }\n        return false\n    }\n\n    function checkSorted(person){\n        for (let room = 0; room <taken.length; room++) {\n            if (taken[room].name === person){\n                return true\n            }\n        }\n        return false\n    }\n\n    function resetConflict(rooms){\n        var holder = {}\n        for (let room of rooms) {\n            holder[room] = [];\n        }\n        return holder\n    }\n\n    // Object containing conflicts for rooms\n    var conflict;\n\n    // Variable to track if there is a conflict\n    var isConflict;\n\n     // Array of taken rooms, {name: name, room: room}\n    var taken = []\n\n    var length = choices[0].rooms.length\n    var rooms = choices[0].rooms\n\n    for (let i = 0; i < length; i++){\n        conflict = resetConflict(rooms)\n        for (let person=0; person < choices.length; person++){\n            if (!checkTaken(choices[person].rooms[i]) && !checkSorted(choices[person].name)){\n                isConflict = false\n                for (let other=0; other< choices.length; other++){\n                    if (choices[person].rooms[i] === choices[other].rooms[i] && choices[person] !== choices[other] && !checkSorted(choices[other].name) && !isConflict){\n                        isConflict = true\n                        conflict[choices[person].rooms[i]].push(choices[person].name)\n                    }\n                }\n            }\n\n            if (!isConflict && !checkTaken(choices[person].rooms[i])){\n                taken.push({room: choices[person].rooms[i], name: choices[person].name})\n            }\n        }\n        for (var room in conflict) {\n            if (!checkTaken(room) && conflict[room].length > 0){\n                let rand = Math.floor(Math.random() * Math.floor(conflict[room].length))\n                let person = conflict[room][rand]\n                taken.push({name: person, room: room})\n            }\n        }\n\n    }\n\n    return taken\n}\n\nexport default AllocateRooms","import { Button, Container, Row, Table } from 'react-bootstrap';\n\nfunction AllocatedRooms(props) {\n    return (\n        <Container>\n            <Row>\n                <div className=\"Title\">\n                    <h1>Results</h1>\n                </div>\n            </Row>\n            <Row>\n                <div className='Results-Page'>\n                    <div className='Results-Holder'>\n                        <Table className=\"Table\" striped bordered hover>\n                            <thead>\n                                <tr>\n                                    <td>Person</td>\n                                    <td>Room</td>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                {props.allocations.map(person => {\n                                    return (\n                                        <tr>\n                                            <td>{person.name}</td>\n                                            <td>{person.room}</td>\n                                        </tr>\n                                    )\n                                })}\n                            </tbody>\n                        </Table>\n                    </div>\n                </div>\n            </Row>\n            <Row>\n                <div className=\"Buttons-Holder\">\n                    <button onClick={() => props.reallocateRooms(props.choices)}>Re-Allocate Rooms</button>\n                    <button onClick={() => props.setState('set-up')}>Allocate More Rooms</button>\n                </div>\n            </Row>\n            <br></br>\n        </Container>\n    )\n}\n\nexport default AllocatedRooms","import { useEffect, useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nfunction useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n\nfunction AddPersonModal(props) {\n    const [name, setName] = useState()\n    const [rooms, setRooms] = useState(props.rooms)\n    const forceUpdate = useForceUpdate();\n\n    function moveRank(room, newRank, oldRank) {\n        var oldRanks = rooms\n        var newRanks = oldRanks\n\n        if (newRank > oldRank) {\n            newRanks[oldRank] = oldRanks[oldRank + 1]\n            for (let i = oldRank; i < newRank; i++) {\n                newRanks[i] = oldRanks[i + 1]\n            }\n            newRanks[newRank] = room\n        } else {\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\n            for (let i = oldRank; i > newRank; i--) {\n                newRanks[i] = oldRanks[i - 1]\n            }\n            newRanks[newRank] = room\n        }\n\n        setRooms(newRanks)\n        forceUpdate()\n    }\n\n    function close() {\n        props.setShow(false)\n    }\n\n    function onSubmit() {\n        props.addPerson(name, rooms)\n        close()\n    }\n\n    function onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault()\n        }\n    }\n\n    function allowDrop(e) {\n        e.preventDefault();\n    }\n\n    function drag(e) {\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\n        e.dataTransfer.setData(\"Room\", value);\n        e.dataTransfer.setData(\"Rank\", e.target.id);\n    }\n\n    function drop(e) {\n        e.preventDefault()\n        var room = e.dataTransfer.getData(\"Room\");\n        var oldRank = e.dataTransfer.getData(\"Rank\");\n        var newRank = e.target.id\n        moveRank(room, parseInt(newRank), parseInt(oldRank))\n    }\n\n    function onNameChange(e) {\n        setName(e.target.value);\n    }\n\n    useEffect(() => {\n        var roomsCopy = []\n        for (let room of props.rooms){\n            roomsCopy.push(room)\n        }\n        setRooms(roomsCopy)\n        setName(\"\")\n    }, [props.show])\n\n    function displaySubmit() {\n        if(name){\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\n        } else {\n            return <Button variant=\"success\" disabled>Submit</Button>\n        }\n    }\n\n    return (\n        <Modal show={props.show} onHide={close}>\n            <Modal.Header closeButton>\n                Add Person\n\t\t\t</Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\n                </Form>\n                <div className=\"Rankings-Holder\">\n                    <p>Rankings</p>\n                    {rooms.map((room, index) => {\n                        return (\n                            <div className=\"Ranking-Holder\">\n                                <div className=\"Rank-Pos\">\n                                    <p>{index + 1}.</p>\n                                </div>\n                                <div id={index} value={room} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\n                {displaySubmit()}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default AddPersonModal","import { useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nfunction AddRoomModal(props) {\n\tconst [roomName, setRoomName] = useState()\n\n\tfunction close(){\n\t\tprops.setShow(false)\n\t}\n\n\tfunction onSubmit() {\n\t\tprops.addRoom(roomName)\n\t\tclose()\n\t}\n\n\tfunction onKeyDown(e){\n\t\tif (e.keyCode === 13){\n\t\t\t\te.preventDefault()\n\t\t\t\tonSubmit()\n\t\t}\n}\n\n\tfunction onRoomNameChange(e) {\n\t\tsetRoomName(e.target.value);\n\t}\n\n\treturn (\n\t\t<Modal show={props.show} onHide={close}>\n\t\t\t<Modal.Header closeButton>\n\t\t\t\tAdd Room\n\t\t\t</Modal.Header>\n\t\t\t<Modal.Body>\n\t\t\t\t<Form>\n\t\t\t\t\t<Form.Label>Room Name</Form.Label>\n\t\t\t\t\t<Form.Control type=\"text\" onChange={onRoomNameChange} onKeyDown={onKeyDown}></Form.Control>\n\t\t\t\t</Form>\n\t\t\t</Modal.Body>\n\t\t\t<Modal.Footer>\n\t\t\t\t<Button variant=\"danger\" onClick={close}>Cancel</Button>\n\t\t\t\t<Button variant=\"success\" onClick={onSubmit}>Submit</Button>\n\t\t\t</Modal.Footer>\n\t\t</Modal>\n\t)\n}\n\nexport default AddRoomModal","const { Modal, Button } = require(\"react-bootstrap\");\n\nfunction CheckAllocteModal(props){\n    function close(){\n        props.setShow(false)\n    }\n\n    function onAllocateRooms(){\n        props.allocateRooms()\n    }\n\n    return (\n        <Modal show={props.show} onHide={close}>\n            <Modal.Header closeButton>\n                Allocate Rooms\n\t\t\t</Modal.Header>\n            <Modal.Body>\n                {props.checkText}\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\n                <Button variant=\"success\" onClick={onAllocateRooms}>Allocate Rooms</Button>\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default CheckAllocteModal","import { useEffect, useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nfunction useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n\nfunction EditPersonModal(props) {\n    const [name, setName] = useState()\n    const [startName, setStartName] = useState();\n    const [rooms, setRooms] = useState([])\n    const forceUpdate = useForceUpdate();\n\n    function moveRank(room, newRank, oldRank) {\n        var oldRanks = rooms\n        var newRanks = oldRanks\n\n        if (newRank > oldRank) {\n            newRanks[oldRank] = oldRanks[oldRank + 1]\n            for (let i = oldRank; i < newRank; i++) {\n                newRanks[i] = oldRanks[i + 1]\n            }\n            newRanks[newRank] = room\n        } else {\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\n            for (let i = oldRank; i > newRank; i--) {\n                newRanks[i] = oldRanks[i - 1]\n            }\n            newRanks[newRank] = room\n        }\n\n        setRooms(newRanks)\n        forceUpdate()\n    }\n\n    function close() {\n        props.setShow(false)\n    }\n\n    function onSubmit() {\n        props.updatePerson(startName, name, rooms)\n        close()\n    }\n\n    function onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault()\n        }\n    }\n\n    function allowDrop(e) {\n        e.preventDefault();\n    }\n\n    function drag(e) {\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\n        e.dataTransfer.setData(\"Room\", value);\n        e.dataTransfer.setData(\"Rank\", e.target.id);\n    }\n\n    function drop(e) {\n        e.preventDefault()\n        var room = e.dataTransfer.getData(\"Room\");\n        var oldRank = e.dataTransfer.getData(\"Rank\");\n        var newRank = e.target.id\n        moveRank(room, parseInt(newRank), parseInt(oldRank))\n    }\n\n    function onNameChange(e) {\n        setName(e.target.value);\n    }\n\n    useEffect(() => {\n        setRooms(props.rooms)\n        setName(props.name)\n        setStartName(props.name)\n    }, [props.show])\n\n    function displaySubmit() {\n        if(name){\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\n        } else {\n            return <Button variant=\"success\" disabled>Submit</Button>\n        }\n    }\n\n    return (\n        <Modal show={props.show} onHide={close}>\n            <Modal.Header closeButton>\n                Add Person\n\t\t\t</Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" value={name} onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\n                </Form>\n                <div className=\"Rankings-Holder\">\n                    <p>Rankings</p>\n                    {rooms.map((room, index) => {\n                        return (\n                            <div className=\"Ranking-Holder\">\n                                <div className=\"Rank-Pos\">\n                                    <p>{index + 1}.</p>\n                                </div>\n                                <div id={index} value={room} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\n                {displaySubmit()}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditPersonModal","import { useState } from 'react';\nimport { Button, Col, Container, Row, Table } from 'react-bootstrap';\nimport AddPersonModal from './AddPersonModal';\nimport AddRoomModal from './AddRoomModal';\nimport './App.css';\nimport CheckAllocteModal from './CheckAllocateModal';\nimport EditPersonModal from './EditPersonModal';\n\nfunction SetUpPage(props) {\n\tconst [rooms, setRooms] = useState([])\n\tconst [people, setPeople] = useState([])\n\tconst [showAddRoom, setShowAddRoom] = useState(false)\n\tconst [showAddPeople, setShowAddPeople] = useState(false)\n\tconst [showEditPerson, setShowEditPerson] = useState(false)\n\tconst [personToEdit, setPersonToEdit] = useState(null)\n\tconst [roomsToEdit, setRoomsToEdit] = useState([])\n\tconst [checkAllocate, setCheckAllocate] = useState(false)\n\tconst [checkText, setCheckText] = useState('are you sure')\n\n\tfunction addRoom(name) {\n\t\tvar newRooms = rooms;\n\t\tnewRooms.push(name)\n\t\tsetRooms(newRooms)\n\t\tfor (let person of people) {\n\t\t\tvar holder = person.rooms\n\t\t\tif (holder.length !== newRooms.length) {\n\t\t\t\tholder.push(name)\n\t\t\t\tperson.rooms = holder\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction onAddRoom() {\n\t\tsetShowAddRoom(true)\n\t}\n\n\tfunction addPerson(name, rankings) {\n\t\tlet person = {\n\t\t\tname: name,\n\t\t\trooms: rankings\n\t\t}\n\t\tvar holder = people;\n\t\tpeople.push(person);\n\t\tsetPeople(holder)\n\t}\n\n\tfunction onAddPeople() {\n\t\tif (rooms.length < 2) {\n\t\t\talert(\"Not enough rooms added\")\n\t\t} else {\n\t\t\tsetShowAddPeople(true)\n\t\t}\n\t}\n\n\tfunction updatePerson(oldName, newName, newRooms) {\n\t\tvar newPeople = people;\n\t\tfor (let person of newPeople) {\n\t\t\tif (person.name === oldName) {\n\t\t\t\tperson.name = newName;\n\t\t\t\tperson.rooms = newRooms\n\t\t\t}\n\t\t}\n\t\tsetPeople(newPeople)\n\t}\n\n\t// Setting it to value on name is a bit of a bodge but for this task it gets the job done\n\tfunction onEditPerson(e) {\n\t\tvar name = e.target.name\n\t\tvar rankings = e.target.value.split(\",\")\n\t\tsetPersonToEdit(name)\n\t\tsetRoomsToEdit(rankings)\n\t\tsetShowEditPerson(true)\n\t}\n\n\tfunction onAllocateRooms() {\n\t\tif (rooms.length < 2){\n\t\t\talert('Not enough rooms')\n\t\t} else if (people.length < 2) {\n\t\t\talert('Not enough people')\n\t\t} else if (rooms.length > people.length) {\n\t\t\tsetCheckText(\"More rooms than people, are you sure you want to allocate rooms?\")\n\t\t\tsetCheckAllocate(true)\n\t\t} else if (people.length > rooms.length) {\n\t\t\tsetCheckText(\"More people than rooms, are you sure you want to allocate rooms?\")\n\t\t\tsetCheckAllocate(true)\n\t\t} else {\n\t\t\tprops.allocateRooms(people)\n\t\t}\n\t}\n\n\tfunction allocateRooms(){\n\t\tprops.allocateRooms(people)\n\t}\n\n\tfunction displayRooms() {\n\t\tif (rooms.length === 0) {\n\t\t\treturn <tr><td><i>No Rooms Added</i></td></tr>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\trooms.map(room => {\n\t\t\t\t\treturn <tr><td>{room}</td></tr>\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\t}\n\n\tfunction displayPeople() {\n\t\tif (people.length === 0) {\n\t\t\treturn <tr><td><i>Nobody Added</i></td></tr>\n\t\t} else {\n\t\t\treturn (\n\t\t\t\tpeople.map(person => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>{person.name}</td>\n\t\t\t\t\t\t\t<td>{person.rooms.toString()} <Button className=\"Edit-Button\" name={person.name} value={person.rooms.toString()} onClick={onEditPerson}>Edit</Button></td>\n\t\t\t\t\t\t</tr>)\n\t\t\t\t})\n\t\t\t)\n\t\t}\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<AddRoomModal\n\t\t\t\tshow={showAddRoom}\n\t\t\t\tsetShow={setShowAddRoom}\n\t\t\t\taddRoom={addRoom}\n\t\t\t/>\n\t\t\t<AddPersonModal\n\t\t\t\tshow={showAddPeople}\n\t\t\t\trooms={rooms}\n\t\t\t\tsetShow={setShowAddPeople}\n\t\t\t\taddPerson={addPerson}\n\t\t\t/>\n\t\t\t<EditPersonModal\n\t\t\t\tshow={showEditPerson}\n\t\t\t\trooms={roomsToEdit}\n\t\t\t\tname={personToEdit}\n\t\t\t\tsetShow={setShowEditPerson}\n\t\t\t\tupdatePerson={updatePerson}\n\t\t\t/>\n\t\t\t<CheckAllocteModal\n\t\t\t\tshow={checkAllocate}\n\t\t\t\tcheckText={checkText}\n\t\t\t\tsetShow={setCheckAllocate}\n\t\t\t\tallocateRooms={allocateRooms}\n\t\t\t/>\n      <Container>\n\t\t\t<Row>\n\t\t\t\t<div className=\"Title\">\n\t\t\t\t\t<h1>Room Allocator</h1>\n\t\t\t\t\t<p>Allocate rooms in your house in the fairest way possible</p>\n\t\t\t\t</div>\n\t\t\t</Row>\n\t\t\t<Row className=\"Body\">\n\t\t\t\t<Col className=\"Button-Holder\">\n\t\t\t\t\t<button className=\"Add-Button\" onClick={onAddRoom}>Add Room</button>\n\t\t\t\t\t<button className=\"Add-Button\" onClick={onAddPeople}>Add Person</button>\n\t\t\t\t</Col>\n\t\t\t\t<Col>\n\t\t\t\t\t<Table className=\"Table\" striped bordered hover>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td>Rooms</td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{displayRooms()}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</Table>\n\t\t\t\t</Col>\n\t\t\t</Row>\n\t\t\t<Row>\n\t\t\t\t<Table className=\"Table\" striped bordered hover>\n\t\t\t\t\t<thead>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>Person</td>\n\t\t\t\t\t\t\t<td>Rankings</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</thead>\n\t\t\t\t\t<tbody>\n\t\t\t\t\t\t{displayPeople()}\n\t\t\t\t\t</tbody>\n\t\t\t\t</Table>\n\t\t\t</Row>\n\t\t\t<Row className=\"Submit-Button-Holder\">\n\t\t\t\t<button className=\"Add-Button\" onClick={onAllocateRooms}>Allocate Rooms</button>\n\t\t\t</Row>\n      </Container>\n    </div >\n  );\n}\n\nexport default SetUpPage;\n","import { useState } from 'react';\nimport AllocateRooms from './AllocateRooms';\nimport AllocatedRooms from './AllocatedRooms'\nimport './App.css';\nimport SetUpPage from './SetupPage';\n\nfunction App() {\n  const [state, setState] = useState('set-up')\n  const [choices, setChoices] = useState()\n  const [allocations, setAllocations] = useState(null)\n\n  function onAllocateRooms(choices) {\n    var result = AllocateRooms(choices)\n    setAllocations(result)\n    setChoices(choices)\n    setState('allocated')\n  }\n\n  function displayPage() {\n    switch (state) {\n      case 'set-up':\n        return <SetUpPage allocateRooms={onAllocateRooms} />\n      case 'allocated':\n        return (\n          <AllocatedRooms \n            allocations={allocations}\n            choices={choices}\n            reallocateRooms={onAllocateRooms}\n            setState={setState}\n          />\n        )\n      default:\n        return <p>Somethings gone wrong</p>\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {displayPage()}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}