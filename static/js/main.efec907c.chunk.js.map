{"version":3,"sources":["Redux/reducers.js","Redux/store.js","Scripts/AllocateRooms.js","UIComponents/AddPersonModal.js","App.js","index.js"],"names":["initialRooms","initialPeople","store","createStore","combineReducers","people","state","action","tmp","type","id","length","console","log","name","preferences","allocated_room","roomID","person","push","rooms","room","AllocateRooms","choices","checkTaken","val","taken","checkSorted","resetConflict","holder","conflict","isConflict","i","other","Object","keys","rand","Math","floor","random","AddPersonModal","connect","roomsList","dispatch","handleAddPerson","show","setShow","useState","setName","setRooms","forceUpdate","setValue","value","useForceUpdate","close","onSubmit","allowDrop","e","preventDefault","drag","selected","document","getElementById","target","getAttribute","toString","dataTransfer","setData","drop","dropped","getData","oldRank","newRank","oldRanks","newRanks","moveRank","parseInt","useEffect","roomsCopy","Modal","onHide","Header","closeButton","Body","Form","Label","Control","onChange","onKeyDown","keyCode","className","map","index","draggable","onDrop","onDragOver","onDragStart","Footer","Button","variant","onClick","disabled","PageHolder","styled","div","TablesHolder","ResultsHolder","Table","table","Row","tr","Container","handleAddRoom","handleRemoveRoom","showAddPersonModal","setShowAddPersonModal","allocatedRooms","setAllocatedRooms","setForceUpdate","style","display","alignItems","position","margin","right","placeholder","nameExists","alert","choice","res","result","rootElement","ReactDOM","render"],"mappings":"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","file":"static/js/main.efec907c.chunk.js","sourcesContent":["const initialRooms = []\r\n\r\nexport const roomReducer = function (state = initialRooms, action) {\r\n    let tmp = []\r\n    switch (action.type) {\r\n        case \"ADD_ROOM\":\r\n            var id;\r\n            if (state.length === 0) {\r\n                id = 0\r\n            } else {\r\n                id = state[state.length - 1].id + 1\r\n            }\r\n            return [...state, {id: id, name: action.name}]\r\n        case \"REMOVE_ROOM\":\r\n            for (let room of state) {\r\n                if (room.id != action.id) {\r\n                    tmp.push(room)\r\n                }\r\n            }\r\n            return tmp;\r\n        case \"UPDATE_NAME\":\r\n            for (let room of state) {\r\n                if (room.id === action.id) {\r\n                    tmp.push({id: room.id, name: action.name})\r\n                } else {\r\n                    tmp.push(room)\r\n                }\r\n            }\r\n            return tmp;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst initialPeople = []\r\n\r\nexport const personReducer = function (state = initialPeople, action) {\r\n    let tmp = []\r\n    switch (action.type) {\r\n        case \"ADD_PERSON\":\r\n            var id;\r\n            if (state.length === 0) {\r\n                id = 0\r\n            } else {\r\n                id = state[state.length - 1] + 1\r\n            }\r\n            console.log(state)\r\n            return [...state, {id: id, name: action.name, preferences: action.preferences, allocated_room: false}];\r\n        case \"ADD_ROOM\":\r\n            if (state[0]) {\r\n                var roomID;\r\n                if (state[0].preferences.length > 0) {\r\n                    roomID = state[0].preferences[state[0].preferences.length - 1].id + 1;\r\n                } else {\r\n                    roomID = 0;\r\n                }\r\n                for (let person of state) {\r\n                    tmp.push({id: person.id, name: person.name, preferences: [...person.preferences, {id: roomID, name: action.name}], allocated_room: person.allocated_room})\r\n                }\r\n                return tmp\r\n            } else {\r\n                return state\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import { combineReducers, createStore } from \"redux\"\r\nimport { personReducer, roomReducer } from \"./reducers\"\r\n\r\nexport const store = createStore(combineReducers({people: personReducer, rooms: roomReducer}))","function AllocateRooms(choices) {\r\n\r\n    function checkTaken(val) {\r\n        console.log(\"----\")\r\n        console.log(val, taken)\r\n        for (let room of taken) {\r\n            if (val === room.room){\r\n                console.log(\"Sorted\")\r\n                return true\r\n            }\r\n        }\r\n        console.log(\"not sorted\")\r\n        return false\r\n    }\r\n\r\n    function checkSorted(person){\r\n        for (let room = 0; room <taken.length; room++) {\r\n            if (taken[room].name === person){\r\n                return true\r\n            }\r\n        }\r\n        return false\r\n    }\r\n\r\n    function resetConflict(rooms){\r\n        var holder = {}\r\n        for (let room of rooms) {\r\n            holder[room.name] = [];\r\n        }\r\n        return holder\r\n    }\r\n\r\n    // Object containing conflicts for rooms\r\n    var conflict;\r\n\r\n    // Variable to track if there is a conflict\r\n    var isConflict;\r\n\r\n     // Array of taken rooms, {name: name, room: room}\r\n    var taken = []\r\n    console.log(\"choices\", choices)\r\n    var length = choices[0].preferences.length\r\n    var rooms = choices[0].preferences\r\n\r\n    for (let i = 0; i < length; i++){\r\n        conflict = resetConflict(rooms)\r\n\r\n        for (let person=0; person < choices.length; person++){\r\n            if (!checkTaken(choices[person].preferences[i].name) && !checkSorted(choices[person].name)){\r\n                isConflict = false\r\n                for (let other=0; other< choices.length; other++){\r\n                    if (choices[person].preferences[i] === choices[other].preferences[i] && choices[person] !== choices[other] && !checkSorted(choices[other].name) && !isConflict){\r\n                        isConflict = true\r\n                        conflict[choices[person].preferences[i].name].push(choices[person].name)\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (!isConflict && !checkTaken(choices[person].preferences[i].name)){\r\n                taken.push({room: choices[person].preferences[i].name, name: choices[person].name})\r\n            }\r\n        }\r\n\r\n        for (var room of Object.keys(conflict)) {\r\n            if (!checkTaken(room) && conflict[room].length > 0){\r\n                let rand = Math.floor(Math.random() * Math.floor(conflict[room].length))\r\n                let person = conflict[room][rand]\r\n                taken.push({name: person, room: room})\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    return taken\r\n}\r\n\r\nexport default AllocateRooms","import { useEffect, useState } from \"react\"\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction useForceUpdate() {\r\n    const [value, setValue] = useState(0); // integer state\r\n    return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nfunction AddPersonModalComponent({ roomsList, show, setShow, handleAddPerson }) {\r\n    const [name, setName] = useState()\r\n    const [rooms, setRooms] = useState(roomsList)\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    function moveRank(room, newRank, oldRank) {\r\n        var oldRanks = rooms\r\n        var newRanks = oldRanks\r\n\r\n        if (newRank > oldRank) {\r\n            newRanks[oldRank] = oldRanks[oldRank + 1]\r\n            for (let i = oldRank; i < newRank; i++) {\r\n                newRanks[i] = oldRanks[i + 1]\r\n            }\r\n            newRanks[newRank] = room\r\n        } else {\r\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\r\n            for (let i = oldRank; i > newRank; i--) {\r\n                newRanks[i] = oldRanks[i - 1]\r\n            }\r\n            newRanks[newRank] = room\r\n        }\r\n\r\n        setRooms(newRanks)\r\n        forceUpdate()\r\n    }\r\n\r\n    function close() {\r\n        setShow(false)\r\n    }\r\n\r\n    function onSubmit() {\r\n        console.log(name, rooms)\r\n        handleAddPerson(name, rooms)\r\n        close()\r\n    }\r\n\r\n    function onKeyDown(e) {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    function allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function drag(e) {\r\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\r\n        var selected;\r\n        for (let room of rooms) {\r\n            if (room.id.toString() === value) {\r\n                selected = room\r\n            }\r\n        }\r\n        e.dataTransfer.setData(\"RoomID\", selected.id);\r\n        e.dataTransfer.setData(\"Rank\", e.target.id);\r\n    }\r\n\r\n    function drop(e) {\r\n        e.preventDefault()\r\n        var roomID = e.dataTransfer.getData(\"RoomID\");        \r\n        var dropped;\r\n        for (let room of rooms) {\r\n            if (room.id.toString() === roomID) {\r\n                dropped = room\r\n            }\r\n        }\r\n        var oldRank = e.dataTransfer.getData(\"Rank\");\r\n        var newRank = e.target.id\r\n        moveRank(dropped, parseInt(newRank), parseInt(oldRank))\r\n    }\r\n\r\n    function onNameChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        var roomsCopy = []\r\n        for (let room of roomsList) {\r\n            roomsCopy.push(room)\r\n        }\r\n        setRooms(roomsCopy)\r\n        setName(\"\")\r\n    }, [show])\r\n\r\n    function displaySubmit() {\r\n        if (name) {\r\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\r\n        } else {\r\n            return <Button variant=\"success\" disabled>Submit</Button>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={close}>\r\n            <Modal.Header closeButton>\r\n                Add Person\r\n\t\t\t</Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\r\n                </Form>\r\n                <div className=\"Rankings-Holder\">\r\n                    <p>Rankings</p>\r\n                    {rooms.map((room, index) => {\r\n                        return (\r\n                            <div className=\"Ranking-Holder\">\r\n                                <div className=\"Rank-Pos\">\r\n                                    <p>{index + 1}.</p>\r\n                                </div>\r\n                                <div id={index} value={room.id} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room.name}</div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\r\n                {displaySubmit()}\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        roomsList: state.rooms\r\n    };\r\n};\r\nconst mapDisapatchToProps = dispatch => {\r\n    return {\r\n        handleAddPerson: (name, preferences) => dispatch({ type: 'ADD_PERSON', name: name, preferences: preferences })\r\n    };\r\n};\r\nexport const AddPersonModal = connect(mapStateToProps, mapDisapatchToProps)(AddPersonModalComponent)","import React, { useState } from 'react'\r\nimport { connect } from \"react-redux\"\r\nimport styled from 'styled-components'\r\nimport \"./App.css\"\r\nimport AllocateRooms from './Scripts/AllocateRooms';\r\nimport { AddPersonModal } from './UIComponents/AddPersonModal';\r\n\r\nconst PageHolder = styled.div`\r\n  padding: 2em;\r\n  width:100vw;\r\n  height: 100vh;\r\n`;\r\n\r\nconst TablesHolder = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(2, auto);\r\n`;\r\n\r\nconst ResultsHolder = styled.div`\r\n  min-height: 50px;\r\n  margin-top: 2em;\r\n`;\r\n\r\nconst Table = styled.table`\r\n  margin: 1em;\r\n  border: 1px solid black;\r\n`;\r\n\r\nconst Row = styled.tr`\r\n  border: 1px solid black;\r\n`;\r\n\r\n\r\n\r\n\r\nconst App = ({ people, rooms, handleRemoveRoom, handleAddRoom }) => {\r\n  const [showAddPersonModal, setShowAddPersonModal] = useState(false)\r\n  const [allocatedRooms, setAllocatedRooms] = useState([])\r\n  const [forceUpdate, setForceUpdate] = useState(false)\r\n\r\n  const addRoom = () => {\r\n    let name = document.getElementById(\"new-room-name\").value\r\n    var nameExists = false\r\n    for (let room of rooms) {\r\n      if (room.name === name) {\r\n        nameExists = true\r\n      }\r\n    }\r\n    if (name.length < 1 || name.length > 19 && !nameExists) {\r\n      alert(\"Room names can only be 1 - 19 characters long\")\r\n    } else if (nameExists) {\r\n      alert(\"Name already exists\")\r\n    } else {\r\n      handleAddRoom(name)\r\n    }\r\n  }\r\n\r\n  const removeRoom = (id) => {\r\n    handleRemoveRoom(id)\r\n  }\r\n\r\n  const allocateRooms = () => {\r\n    let res = AllocateRooms(people);\r\n    setAllocatedRooms(res)\r\n    setForceUpdate(!forceUpdate)\r\n  }\r\n\r\n  return (\r\n    <PageHolder>\r\n      <AddPersonModal show={showAddPersonModal} setShow={setShowAddPersonModal} />\r\n      <h1>Room Allocator</h1>\r\n      <p>Allocate rooms in your house in the fairest way possible</p>\r\n      <TablesHolder>\r\n        <Table>\r\n          <thead>\r\n            <Row>\r\n              <th>Rooms</th>\r\n            </Row>\r\n          </thead>\r\n          <tbody>\r\n            {rooms.map(room => (\r\n              <Row>\r\n                <td style={{ display: 'flex', alignItems: 'center', position: 'relative' }}>\r\n                  <p style={{ margin: \"0.5em\", display: \"inline\" }}>{room.name}</p>\r\n                  <div style={{ position: 'absolute', right: \"5px\" }}>\r\n                    <button>Edit</button>\r\n                    <button onClick={() => removeRoom(room.id)} style={{ margin: \"0.5em\" }}>Remove</button>\r\n                  </div>\r\n\r\n                </td>\r\n              </Row>\r\n            ))}\r\n            <Row>\r\n              <td>\r\n                <input type=\"text\" id=\"new-room-name\" placeholder=\"Type here\" style={{ margin: \"0.5em\" }} />\r\n                <button onClick={addRoom}>Add Room</button>\r\n              </td>\r\n            </Row>\r\n          </tbody>\r\n        </Table>\r\n\r\n        <Table>\r\n          <thead>\r\n            <Row>\r\n              <th>People</th>\r\n            </Row>\r\n          </thead>\r\n          <tbody>\r\n            {people.map(person => (\r\n              <Row>\r\n                <td>\r\n                  {person.name}\r\n                  <br />\r\n                  Preferences:\r\n                  {\" \" + person.preferences.map(choice => (choice.name))}\r\n                </td>\r\n              </Row>\r\n            ))}\r\n            <Row>\r\n              <td>\r\n                <button style={{ margin: \"0.5em\" }} onClick={() => setShowAddPersonModal(true)}>Add Person</button>\r\n              </td>\r\n            </Row>\r\n          </tbody>\r\n        </Table>\r\n      </TablesHolder>\r\n      <button onClick={allocateRooms}>Allocate Rooms</button>\r\n      <ResultsHolder>\r\n        {allocatedRooms.length > 0 ? <h1>Results</h1> : null}\r\n        {allocatedRooms.map(result => (\r\n          <p>{result.name} is in {result.room}</p>\r\n        ))}\r\n      </ResultsHolder>\r\n    </PageHolder >\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    people: state.people,\r\n    rooms: state.rooms\r\n  };\r\n};\r\nconst mapDisapatchToProps = dispatch => {\r\n  return {\r\n    handleAddRoom: (name) => dispatch({ type: 'ADD_ROOM', name: name }),\r\n    handleRemoveRoom: (id) => dispatch({ type: 'REMOVE_ROOM', id: id })\r\n  };\r\n};\r\nexport const Container = connect(mapStateToProps, mapDisapatchToProps)(App)","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n\r\nimport { Provider } from \"react-redux\"\r\nimport { store } from \"./Redux/store\"\r\nimport { Container } from \"./App\"\r\n\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Container />\r\n  </Provider>,\r\n  rootElement\r\n);\r\n"],"sourceRoot":""}