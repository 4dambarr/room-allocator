[{"C:\\Users\\adamb\\room-allocator\\src\\index.js":"1","C:\\Users\\adamb\\room-allocator\\src\\App.js":"2","C:\\Users\\adamb\\room-allocator\\src\\Redux\\store.js":"3","C:\\Users\\adamb\\room-allocator\\src\\Redux\\reducers.js":"4","C:\\Users\\adamb\\room-allocator\\src\\UIComponents\\AddPersonModal.js":"5","C:\\Users\\adamb\\room-allocator\\src\\Scripts\\AllocateRooms.js":"6"},{"size":409,"mtime":1622203961542,"results":"7","hashOfConfig":"8"},{"size":4293,"mtime":1622214774018,"results":"9","hashOfConfig":"8"},{"size":207,"mtime":1622204085432,"results":"10","hashOfConfig":"8"},{"size":2108,"mtime":1622213090397,"results":"11","hashOfConfig":"8"},{"size":4575,"mtime":1622210753026,"results":"12","hashOfConfig":"8"},{"size":2345,"mtime":1622214600433,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"115jcfx",{"filePath":"17","messages":"18","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\adamb\\room-allocator\\src\\index.js",[],["28","29"],"C:\\Users\\adamb\\room-allocator\\src\\App.js",["30","31","32"],"C:\\Users\\adamb\\room-allocator\\src\\Redux\\store.js",[],"C:\\Users\\adamb\\room-allocator\\src\\Redux\\reducers.js",["33","34"],"C:\\Users\\adamb\\room-allocator\\src\\UIComponents\\AddPersonModal.js",["35","36"],"import { useEffect, useState } from \"react\"\r\nimport { Button, Form, Modal } from \"react-bootstrap\"\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction useForceUpdate() {\r\n    const [value, setValue] = useState(0); // integer state\r\n    return () => setValue(value => value + 1); // update the state to force render\r\n}\r\n\r\nfunction AddPersonModalComponent({ roomsList, show, setShow, handleAddPerson }) {\r\n    const [name, setName] = useState()\r\n    const [rooms, setRooms] = useState(roomsList)\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    function moveRank(room, newRank, oldRank) {\r\n        var oldRanks = rooms\r\n        var newRanks = oldRanks\r\n\r\n        if (newRank > oldRank) {\r\n            newRanks[oldRank] = oldRanks[oldRank + 1]\r\n            for (let i = oldRank; i < newRank; i++) {\r\n                newRanks[i] = oldRanks[i + 1]\r\n            }\r\n            newRanks[newRank] = room\r\n        } else {\r\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\r\n            for (let i = oldRank; i > newRank; i--) {\r\n                newRanks[i] = oldRanks[i - 1]\r\n            }\r\n            newRanks[newRank] = room\r\n        }\r\n\r\n        setRooms(newRanks)\r\n        forceUpdate()\r\n    }\r\n\r\n    function close() {\r\n        setShow(false)\r\n    }\r\n\r\n    function onSubmit() {\r\n        console.log(name, rooms)\r\n        handleAddPerson(name, rooms)\r\n        close()\r\n    }\r\n\r\n    function onKeyDown(e) {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault()\r\n        }\r\n    }\r\n\r\n    function allowDrop(e) {\r\n        e.preventDefault();\r\n    }\r\n\r\n    function drag(e) {\r\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\r\n        var selected;\r\n        for (let room of rooms) {\r\n            if (room.id.toString() === value) {\r\n                selected = room\r\n            }\r\n        }\r\n        e.dataTransfer.setData(\"RoomID\", selected.id);\r\n        e.dataTransfer.setData(\"Rank\", e.target.id);\r\n    }\r\n\r\n    function drop(e) {\r\n        e.preventDefault()\r\n        var roomID = e.dataTransfer.getData(\"RoomID\");        \r\n        var dropped;\r\n        for (let room of rooms) {\r\n            if (room.id.toString() === roomID) {\r\n                dropped = room\r\n            }\r\n        }\r\n        var oldRank = e.dataTransfer.getData(\"Rank\");\r\n        var newRank = e.target.id\r\n        moveRank(dropped, parseInt(newRank), parseInt(oldRank))\r\n    }\r\n\r\n    function onNameChange(e) {\r\n        setName(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        var roomsCopy = []\r\n        for (let room of roomsList) {\r\n            roomsCopy.push(room)\r\n        }\r\n        setRooms(roomsCopy)\r\n        setName(\"\")\r\n    }, [show])\r\n\r\n    function displaySubmit() {\r\n        if (name) {\r\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\r\n        } else {\r\n            return <Button variant=\"success\" disabled>Submit</Button>\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Modal show={show} onHide={close}>\r\n            <Modal.Header closeButton>\r\n                Add Person\r\n\t\t\t</Modal.Header>\r\n            <Modal.Body>\r\n                <Form>\r\n                    <Form.Label>Name</Form.Label>\r\n                    <Form.Control type=\"text\" onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\r\n                </Form>\r\n                <div className=\"Rankings-Holder\">\r\n                    <p>Rankings</p>\r\n                    {rooms.map((room, index) => {\r\n                        return (\r\n                            <div className=\"Ranking-Holder\">\r\n                                <div className=\"Rank-Pos\">\r\n                                    <p>{index + 1}.</p>\r\n                                </div>\r\n                                <div id={index} value={room.id} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room.name}</div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </div>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\r\n                {displaySubmit()}\r\n            </Modal.Footer>\r\n        </Modal>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        roomsList: state.rooms\r\n    };\r\n};\r\nconst mapDisapatchToProps = dispatch => {\r\n    return {\r\n        handleAddPerson: (name, preferences) => dispatch({ type: 'ADD_PERSON', name: name, preferences: preferences })\r\n    };\r\n};\r\nexport const AddPersonModal = connect(mapStateToProps, mapDisapatchToProps)(AddPersonModalComponent)","C:\\Users\\adamb\\room-allocator\\src\\Scripts\\AllocateRooms.js",[],{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","severity":1,"message":"42","line":39,"column":10,"nodeType":"43","messageId":"44","endLine":39,"endColumn":21},{"ruleId":"45","severity":1,"message":"46","line":49,"column":25,"nodeType":"47","messageId":"48","endLine":49,"endColumn":27},{"ruleId":"45","severity":1,"message":"46","line":49,"column":45,"nodeType":"47","messageId":"48","endLine":49,"endColumn":47},{"ruleId":"49","severity":1,"message":"50","line":16,"column":29,"nodeType":"51","messageId":"52","endLine":16,"endColumn":31},{"ruleId":"53","severity":1,"message":"54","line":62,"column":9,"nodeType":"55","messageId":"56","endLine":63,"endColumn":26},{"ruleId":"41","severity":1,"message":"57","line":6,"column":12,"nodeType":"43","messageId":"44","endLine":6,"endColumn":17},{"ruleId":"58","severity":1,"message":"59","line":94,"column":8,"nodeType":"60","endLine":94,"endColumn":14,"suggestions":"61"},"no-native-reassign",["62"],"no-negated-in-lhs",["63"],"no-unused-vars","'forceUpdate' is assigned a value but never used.","Identifier","unusedVar","no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","no-fallthrough","Expected a 'break' statement before 'default'.","SwitchCase","default","'value' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'roomsList'. Either include it or remove the dependency array.","ArrayExpression",["64"],"no-global-assign","no-unsafe-negation",{"desc":"65","fix":"66"},"Update the dependencies array to be: [roomsList, show]",{"range":"67","text":"68"},[2664,2670],"[roomsList, show]"]