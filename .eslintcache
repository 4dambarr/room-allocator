[{"/Users/adambarr/room-allocator/src/index.js":"1","/Users/adambarr/room-allocator/src/App.js":"2","/Users/adambarr/room-allocator/src/reportWebVitals.js":"3","/Users/adambarr/room-allocator/src/AddRoomModal.js":"4","/Users/adambarr/room-allocator/src/AddPersonModal.js":"5","/Users/adambarr/room-allocator/src/EditPersonModal.js":"6","/Users/adambarr/room-allocator/src/SetupPage.js":"7","/Users/adambarr/room-allocator/src/AllocateRooms.js":"8","/Users/adambarr/room-allocator/src/CheckAllocateModal.js":"9"},{"size":548,"mtime":1610746487516,"results":"10","hashOfConfig":"11"},{"size":869,"mtime":1611179993466,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1610741738811,"results":"13","hashOfConfig":"11"},{"size":949,"mtime":1610796632593,"results":"14","hashOfConfig":"11"},{"size":3527,"mtime":1610802532779,"results":"15","hashOfConfig":"11"},{"size":3638,"mtime":1610805138313,"results":"16","hashOfConfig":"11"},{"size":4310,"mtime":1611182655263,"results":"17","hashOfConfig":"11"},{"size":2127,"mtime":1611179472124,"results":"18","hashOfConfig":"11"},{"size":614,"mtime":1611179945400,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1a1v6td",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"22"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"22"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/adambarr/room-allocator/src/index.js",[],["43","44"],"/Users/adambarr/room-allocator/src/App.js",["45"],"import { useState } from 'react';\nimport AllocateRooms from './AllocateRooms';\nimport './App.css';\nimport SetUpPage from './SetupPage';\n\nfunction App() {\n  const [state, setState] = useState('set-up')\n  const [allocations, setAllocations] = useState(null)\n\n  function onAllocateRooms(choices) {\n    var result = AllocateRooms(choices)\n    setAllocations(result)\n    setState('allocated')\n  }\n\n  function displayPage() {\n    switch (state) {\n      case 'set-up':\n        return <SetUpPage allocateRooms={onAllocateRooms} />\n      case 'allocated':\n        console.log(allocations)\n        return (\n          <div>\n            {allocations.map(person => {\n              return <p>{person.name} {'->'} {person.room}</p>\n            })}\n          </div>\n        )\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      {displayPage()}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/adambarr/room-allocator/src/reportWebVitals.js",[],"/Users/adambarr/room-allocator/src/AddRoomModal.js",[],"/Users/adambarr/room-allocator/src/AddPersonModal.js",["46","47"],"import { useEffect, useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nfunction useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n\nfunction AddPersonModal(props) {\n    const [name, setName] = useState()\n    const [rooms, setRooms] = useState(props.rooms)\n    const forceUpdate = useForceUpdate();\n\n    function moveRank(room, newRank, oldRank) {\n        var oldRanks = rooms\n        var newRanks = oldRanks\n\n        if (newRank > oldRank) {\n            newRanks[oldRank] = oldRanks[oldRank + 1]\n            for (let i = oldRank; i < newRank; i++) {\n                newRanks[i] = oldRanks[i + 1]\n            }\n            newRanks[newRank] = room\n        } else {\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\n            for (let i = oldRank; i > newRank; i--) {\n                newRanks[i] = oldRanks[i - 1]\n            }\n            newRanks[newRank] = room\n        }\n\n        setRooms(newRanks)\n        forceUpdate()\n    }\n\n    function close() {\n        props.setShow(false)\n    }\n\n    function onSubmit() {\n        props.addPerson(name, rooms)\n        close()\n    }\n\n    function onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault()\n        }\n    }\n\n    function allowDrop(e) {\n        e.preventDefault();\n    }\n\n    function drag(e) {\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\n        e.dataTransfer.setData(\"Room\", value);\n        e.dataTransfer.setData(\"Rank\", e.target.id);\n    }\n\n    function drop(e) {\n        e.preventDefault()\n        var room = e.dataTransfer.getData(\"Room\");\n        var oldRank = e.dataTransfer.getData(\"Rank\");\n        var newRank = e.target.id\n        moveRank(room, parseInt(newRank), parseInt(oldRank))\n    }\n\n    function onNameChange(e) {\n        setName(e.target.value);\n    }\n\n    useEffect(() => {\n        setRooms(props.rooms)\n        setName(\"\")\n    }, [props.show])\n\n    function displaySubmit() {\n        if(name){\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\n        } else {\n            return <Button variant=\"success\" disabled>Submit</Button>\n        }\n    }\n\n    return (\n        <Modal show={props.show} onHide={close}>\n            <Modal.Header closeButton>\n                Add Person\n\t\t\t</Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\n                </Form>\n                <div className=\"Rankings-Holder\">\n                    <p>Rankings</p>\n                    {rooms.map((room, index) => {\n                        return (\n                            <div className=\"Ranking-Holder\">\n                                <div className=\"Rank-Pos\">\n                                    <p>{index + 1}.</p>\n                                </div>\n                                <div id={index} value={room} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\n                {displaySubmit()}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default AddPersonModal","/Users/adambarr/room-allocator/src/EditPersonModal.js",["48","49"],"import { useEffect, useState } from \"react\"\nimport { Button, Form, Modal } from \"react-bootstrap\"\n\nfunction useForceUpdate() {\n    const [value, setValue] = useState(0); // integer state\n    return () => setValue(value => value + 1); // update the state to force render\n}\n\nfunction EditPersonModal(props) {\n    const [name, setName] = useState()\n    const [startName, setStartName] = useState();\n    const [rooms, setRooms] = useState([])\n    const forceUpdate = useForceUpdate();\n\n    function moveRank(room, newRank, oldRank) {\n        var oldRanks = rooms\n        var newRanks = oldRanks\n\n        if (newRank > oldRank) {\n            newRanks[oldRank] = oldRanks[oldRank + 1]\n            for (let i = oldRank; i < newRank; i++) {\n                newRanks[i] = oldRanks[i + 1]\n            }\n            newRanks[newRank] = room\n        } else {\n            newRanks[oldRank] = oldRanks[oldRanks - 1]\n            for (let i = oldRank; i > newRank; i--) {\n                newRanks[i] = oldRanks[i - 1]\n            }\n            newRanks[newRank] = room\n        }\n\n        setRooms(newRanks)\n        forceUpdate()\n    }\n\n    function close() {\n        props.setShow(false)\n    }\n\n    function onSubmit() {\n        props.updatePerson(startName, name, rooms)\n        close()\n    }\n\n    function onKeyDown(e) {\n        if (e.keyCode === 13) {\n            e.preventDefault()\n        }\n    }\n\n    function allowDrop(e) {\n        e.preventDefault();\n    }\n\n    function drag(e) {\n        var value = document.getElementById(e.target.id).getAttribute(\"value\")\n        e.dataTransfer.setData(\"Room\", value);\n        e.dataTransfer.setData(\"Rank\", e.target.id);\n    }\n\n    function drop(e) {\n        e.preventDefault()\n        var room = e.dataTransfer.getData(\"Room\");\n        var oldRank = e.dataTransfer.getData(\"Rank\");\n        var newRank = e.target.id\n        moveRank(room, parseInt(newRank), parseInt(oldRank))\n    }\n\n    function onNameChange(e) {\n        setName(e.target.value);\n    }\n\n    useEffect(() => {\n        setRooms(props.rooms)\n        setName(props.name)\n        setStartName(props.name)\n    }, [props.show])\n\n    function displaySubmit() {\n        if(name){\n            return <Button variant=\"success\" onClick={onSubmit}>Submit</Button>\n        } else {\n            return <Button variant=\"success\" disabled>Submit</Button>\n        }\n    }\n\n    return (\n        <Modal show={props.show} onHide={close}>\n            <Modal.Header closeButton>\n                Add Person\n\t\t\t</Modal.Header>\n            <Modal.Body>\n                <Form>\n                    <Form.Label>Name</Form.Label>\n                    <Form.Control type=\"text\" value={name} onChange={onNameChange} onKeyDown={onKeyDown}></Form.Control>\n                </Form>\n                <div className=\"Rankings-Holder\">\n                    <p>Rankings</p>\n                    {rooms.map((room, index) => {\n                        return (\n                            <div className=\"Ranking-Holder\">\n                                <div className=\"Rank-Pos\">\n                                    <p>{index + 1}.</p>\n                                </div>\n                                <div id={index} value={room} className=\"Room\" draggable onDrop={drop} onDragOver={allowDrop} onDragStart={drag}>{room}</div>\n                            </div>\n                        )\n                    })}\n                </div>\n            </Modal.Body>\n            <Modal.Footer>\n                <Button variant=\"danger\" onClick={close}>Cancel</Button>\n                {displaySubmit()}\n            </Modal.Footer>\n        </Modal>\n    )\n}\n\nexport default EditPersonModal","/Users/adambarr/room-allocator/src/SetupPage.js",["50","51"],"/Users/adambarr/room-allocator/src/AllocateRooms.js",["52"],"function AllocateRooms(choices) {\n\n    function checkTaken(val) {\n        for (let room of taken) {\n            if (val === room.room){\n                return true\n            }\n        }\n        return false\n    }\n\n    function checkSorted(person){\n        for (let room = 0; room <taken.length; room++) {\n            if (taken[room].name === person){\n                return true\n            }\n        }\n        return false\n    }\n\n    function resetConflict(rooms){\n        var holder = {}\n        for (let room of rooms) {\n            holder[room] = [];\n        }\n        return holder\n    }\n\n    // Object containing conflicts for rooms\n    var conflict;\n\n    // Variable to track if there is a conflict\n    var isConflict;\n\n     // Array of taken rooms, {name: name, room: room}\n    var taken = []\n\n    var length = choices[0].rooms.length\n    var rooms = choices[0].rooms\n\n    for (let i = 0; i < length; i++){\n        conflict = resetConflict(rooms)\n        for (let person=0; person < choices.length; person++){\n            if (!checkTaken(choices[person].rooms[i]) && !checkSorted(choices[person].name)){\n                isConflict = false\n                for (let other=0; other< choices.length; other++){\n                    if (choices[person].rooms[i] == choices[other].rooms[i] && choices[person] !== choices[other] && !checkSorted(choices[other].name) && !isConflict){\n                        isConflict = true\n                        conflict[choices[person].rooms[i]].push(choices[person].name)\n                    }\n                }\n            }\n\n            if (!isConflict && !checkTaken(choices[person].rooms[i])){\n                taken.push({room: choices[person].rooms[i], name: choices[person].name})\n            }\n        }\n        for (var room in conflict) {\n            if (!checkTaken(room) && conflict[room].length > 0){\n                let rand = Math.floor(Math.random() * Math.floor(conflict[room].length))\n                let person = conflict[room][rand]\n                taken.push({name: person, room: room})\n            }\n        }\n\n    }\n\n    return taken\n}\n\nexport default AllocateRooms","/Users/adambarr/room-allocator/src/CheckAllocateModal.js",[],{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":17,"column":5,"nodeType":"59","messageId":"60","endLine":29,"endColumn":6},{"ruleId":"61","severity":1,"message":"62","line":5,"column":12,"nodeType":"63","messageId":"64","endLine":5,"endColumn":17},{"ruleId":"65","severity":1,"message":"66","line":76,"column":8,"nodeType":"67","endLine":76,"endColumn":20,"suggestions":"68"},{"ruleId":"61","severity":1,"message":"62","line":5,"column":12,"nodeType":"63","messageId":"64","endLine":5,"endColumn":17},{"ruleId":"65","severity":1,"message":"69","line":78,"column":8,"nodeType":"67","endLine":78,"endColumn":20,"suggestions":"70"},{"ruleId":"61","severity":1,"message":"71","line":18,"column":20,"nodeType":"63","messageId":"64","endLine":18,"endColumn":32},{"ruleId":"72","severity":1,"message":"73","line":26,"column":22,"nodeType":"74","messageId":"75","endLine":26,"endColumn":24},{"ruleId":"72","severity":1,"message":"76","line":47,"column":50,"nodeType":"74","messageId":"75","endLine":47,"endColumn":52},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'value' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props.rooms'. Either include it or remove the dependency array. If 'setRooms' needs the current value of 'props.rooms', you can also switch to useReducer instead of useState and read 'props.rooms' in the reducer.","ArrayExpression",["79"],"React Hook useEffect has missing dependencies: 'props.name' and 'props.rooms'. Either include them or remove the dependency array. If 'setRooms' needs the current value of 'props.rooms', you can also switch to useReducer instead of useState and read 'props.rooms' in the reducer.",["80"],"'setCheckText' is assigned a value but never used.","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","no-global-assign","no-unsafe-negation",{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [props.rooms, props.show]",{"range":"85","text":"86"},"Update the dependencies array to be: [props.name, props.rooms, props.show]",{"range":"87","text":"88"},[2010,2022],"[props.rooms, props.show]",[2107,2119],"[props.name, props.rooms, props.show]"]